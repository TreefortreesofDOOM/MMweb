import { env } from '@/lib/constants/env'
import { createActionClient } from '@/lib/supabase/supabase-action'
import { ok, err, type Result } from '@/lib/utils/core/result-utils'
import { ErrorService } from '@/lib/utils/error/error-service-utils'
import { validateParams } from '@/lib/utils/content/mm-ai-validation-utils'
import { updateArtworkEmbeddings } from '@/lib/ai/embeddings/index'
import { MM_AI_PROFILE_ID } from '@/lib/constants/mm-ai-constants'
import type { ArtworkGenerationContext, ArtworkGenerationMetadata } from '@/lib/unified-ai/artwork-types'
import type { MMAIError } from '@/lib/types/mm-ai-types'
import type { Database, TablesInsert } from '@/lib/types/database.types'

const errorService = ErrorService.getInstance()

export interface UnifiedAIArtworkParams {
  title: string
  description: string
  images: Array<{
    url: string
    alt: string
  }>
  tags: string[]
  aiContext: ArtworkGenerationContext
  metadata: ArtworkGenerationMetadata
}

/**
 * Posts artwork generated by the unified-ai agent directly to the database
 * Handles validation, embeddings generation, and proper error logging
 */
export async function postUnifiedAIArtwork(
  artwork: UnifiedAIArtworkParams,
): Promise<Result<{ id: string }, MMAIError>> {
  try {
    // Validate input parameters
    const validationResult = await validateParams({
      ...artwork,
      aiGenerated: true,
      aiContext: {
        ...artwork.aiContext,
        route: '/artwork/create',
        pageType: 'artwork',
        persona: 'mentor'
      }
    })
    if (!validationResult.ok) {
      errorService.logError({
        code: 'MMAI_001',
        message: 'Validation failed',
        context: 'postUnifiedAIArtwork:validation',
        type: 'validation',
        timestamp: new Date().toISOString(),
        metadata: { artwork }
      })
      return validationResult
    }

    const supabase = await createActionClient()

    // Insert the artwork with additional metadata
    const insertData: TablesInsert<'artworks'> = {
      title: artwork.title,
      description: artwork.description,
      images: artwork.images as Database['public']['Tables']['artworks']['Insert']['images'],
      keywords: artwork.tags,
      artist_id: MM_AI_PROFILE_ID,
      status: 'published',
      ai_generated: true,
      ai_context: artwork.aiContext as Database['public']['Tables']['artworks']['Insert']['ai_context'],
      ai_metadata: {
        ...artwork.metadata,
        system: {
          version: '1.0',
          timestamp: new Date().toISOString(),
          source: 'unified-ai',
          environment: process.env.NODE_ENV
        }
      } as Database['public']['Tables']['artworks']['Insert']['ai_metadata']
    }

    const { data, error } = await supabase
      .from('artworks')
      .insert(insertData)
      .select()
      .single()

    if (error) {
      errorService.logError({
        code: 'MMAI_003',
        message: 'Failed to insert artwork',
        context: 'postUnifiedAIArtwork:insert',
        type: 'database',
        timestamp: new Date().toISOString(),
        metadata: { 
          error: error.message,
          code: error.code,
          artwork 
        }
      })
      return err({ code: 'DATABASE_ERROR', message: 'Failed to create artwork' })
    }

    // Generate and store embeddings for search
    try {
      await updateArtworkEmbeddings({
        artwork_id: data.id,
        title: artwork.title,
        description: artwork.description,
        tags: artwork.tags,
        alt_texts: artwork.images.map(img => img.alt),
        ai_context: artwork.aiContext,
        ai_metadata: artwork.metadata,
        status: 'published',
        artist_id: MM_AI_PROFILE_ID
      });
    } catch (embeddingError) {
      errorService.logError({
        code: 'MMAI_004',
        message: 'Failed to generate embeddings',
        context: 'postUnifiedAIArtwork:embeddings',
        type: 'error',
        timestamp: new Date().toISOString(),
        metadata: { error: embeddingError, artworkId: data.id }
      })
      // Don't fail the artwork creation if embeddings fail
    }

    return ok({ id: data.id })
  } catch (error) {
    errorService.logError({
      code: 'MMAI_005',
      message: 'Unexpected error in unified-ai artwork post',
      context: 'postUnifiedAIArtwork:unexpected',
      type: 'error',
      timestamp: new Date().toISOString(),
      metadata: { error, artwork }
    })
    return err({ 
      code: 'UNEXPECTED_ERROR', 
      message: 'An unexpected error occurred while posting artwork' 
    })
  }
} 