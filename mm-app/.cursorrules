# Meaning Machine

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

- Do not over engineer.
- Check for existing files before creating new ones.
- make sure you are in mm-app directory before running commands.
- Follow DRY (Do not Repeat Yourself) principles.
- Apply YAGNI (You Aren't Gonna Need It) principles.
- Break down complex tasks into smaller, non-overlapping subtasks using MECE (Mutually Exclusive, Collectively Exhaustive)

## Directory Structure Standards

### Core Directories
```
mm-app/
├── app/              # Next.js app router pages
│   ├── (admin)/     # Protected admin routes
│   ├── (auth)/      # Authentication flow
│   ├── (protected)/ # Protected user routes
│   ├── (public)/    # Public pages
│   └── api/         # API endpoints
├── components/       # React components
├── context/         # React contexts
├── hooks/           # Custom React hooks
├── lib/             # Core business logic
│   ├── actions/     # Server actions
│   ├── ai/          # AI implementation
│   ├── analytics/   # Analytics
│   ├── auth/        # Auth utilities
│   ├── stripe/      # Payment integration
│   ├── supabase/    # Database client
│   ├── types/       # Type definitions
│   ├── utils/       # Common utilities
│   └── vertex-ai/   # AI integration
├── public/          # Static assets
└── supabase/        # Database config & migrations
```

## Naming Conventions

1. **File Names**
   - Use kebab-case for all files (e.g., `artwork-card.tsx`, `search-utils.ts`)
   - Add `-utils` suffix for utility files (e.g., `common-utils.ts`)
   - Add domain prefix for domain-specific files (e.g., `stripe-client-utils.ts`)
   - Use descriptive names that indicate functionality

2. **Component Files**
   - Use kebab-case for file names (e.g., `artwork-card.tsx`)
   - Export PascalCase component names (e.g., `export const ArtworkCard = ...`)
   - Group by feature in dedicated directories
   - Include type definitions

3. **Utility Files**
   - Add `-utils` suffix (e.g., `auth-utils.ts`)
   - Group related utilities in feature directories
   - Use domain prefixes when specific to a service

4. **Hook Files**
   - Use camelCase with `use` prefix (e.g., `useAuth.ts`)
   - Place in `/hooks` directory
   - One hook per file

## Supabase Client Patterns
Use the following patterns consistently for Supabase client initialization:

1. **Server Components & API Routes**
```typescript
import { createClient } from '@/lib/supabase/server'
const supabase = await createClient()
```

2. **Server Actions**
```typescript
import { createActionClient } from '@/lib/supabase/action'
const supabase = await createActionClient()
```

3. **Client Components**
```typescript
import { createBrowserClient } from '@/lib/supabase/client'
const supabase = createBrowserClient()
```

> **Note:** All patterns use `@supabase/ssr` under the hood but with different cookie handling strategies appropriate for their context. Do not use the older `auth-helpers-nextjs` package.

## Component Organization
1. Group components by feature (e.g., `admin/`, `artwork/`, `auth/`)
2. Keep shared UI components in `ui/` directory
3. No loose components at root level
4. Follow consistent file naming patterns
5. Include proper type definitions
6. Export PascalCase component names

## Route Organization
1. Use route groups with parentheses for organization:
   - `(admin)/` - Protected admin routes
   - `(auth)/` - Authentication flow
   - `(protected)/` - Protected user routes
   - `(public)/` - Public pages
2. Keep API routes in `api/` directory
3. Maintain proper layouts for each group

## Code Style and Structure
- Write concise, technical TypeScript code
- Use functional and declarative programming patterns
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)

## Project Context
This project involves integrating various features and services to create a comprehensive platform for artists and administrators. The key components include:

- **Stripe Integration**: Setting up Stripe for payment processing, including creating payment intents, handling webhooks, and managing artist payouts.
- **Artist Application Process**: Implementing a detailed application process for artists, including form submission, admin review, and notifications.
- **AI Gallery Assistant**: Setting up an AI-powered assistant using Google Cloud Multimodal Live API for real-time conversation and session management.
- **Admin and Artist Dashboards**: Creating dashboards for both admins and artists to manage applications, view sales history, and handle payouts.
- **Security and Access Control**: Implementing role-based access control, data validation, and rate limiting to ensure platform security and integrity.

## Tech Stack
- Next.js   
- React
- TypeScript
- Tailwind CSS
- Shadcn UI
- Express.js
- Supabase
- Stripe

## Key Supabase Usage
- Do not use supabases auth-helper library
- Supabase handles cookies

# Naming Convention Rules:
- Use lowercase with dashes for directories (e.g., components/form-wizard)
1. Use kebab-case for all file names
2. Add `-utils` suffix for utility files
3. Add domain prefix for domain-specific utilities
4. Use descriptive names that indicate functionality
5. Group related utilities in appropriately named files

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there is good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## State Management
- Use React Context for global state when needed
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog

## Accessibility Standards
- Build accessibility from the start
- Test with keyboard navigation
- Maintain proper heading hierarchy
- Ensure proper contrast ratios

# API Design
- Keep endpoints focused and specific
- Use consistent response patterns
- Handle errors at the source
- Design with scalability in mind

## Data Flow
- Prefer server components for data fetching
- Keep client-side state minimal
- Use server actions for mutations
- Handle loading and error states at boundaries

## Performance
- Optimize only with measurable benefits
- Prefer static over dynamic when possible
- Cache at the appropriate level
- Load assets strategically

## Component Architecture
- Keep components focused and single-purpose
- Prefer composition over configuration
- Share logic through hooks, not inheritance
- Maintain clear component boundaries